{"version":3,"sources":["Simulator.js","App.js","github_corner.js","serviceWorker.js","index.js"],"names":["median","data","length","Error","slice","sort","a","b","mid","Math","floor","VALID_MODES","AttackForm","props","state","mode","attackingTroops","defendingTroops","event","preventDefault","this","handleClick","Number","parseInt","includes","isInteger","alert","onSubmit","target","value","setState","Form","Group","Control","as","onChange","e","updateMode","Label","type","min","updateAttackingTroops","updateDefendingTroops","Button","variant","onClick","React","Component","AnalyseOutcome","survivingAttackMsg","survivingDefenceMsg","result","survivingAttackTroops","survivingDefenceTroops","runs","percentage","AttackSimulator","attack","analyse","status","worker","Worker","onmessage","console","log","Object","entries","formResult","postMessage","win","attacker","defender","Container","Row","Col","lg","handleFormResult","renderOutcome","RiskNavBar","Navbar","bg","expand","Brand","href","Collapse","id","Nav","className","Item","Link","active","dangerouslySetInnerHTML","__html","RiskHeader","class","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.004b77b3.chunk.js","sourcesContent":["import React from 'react';\n\nimport Form from 'react-bootstrap/Form'\nimport Button from 'react-bootstrap/Button';\n\nimport Container from 'react-bootstrap/Container';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nfunction median(data) {\n    if (data.length == 0) throw new Error(\"Empty data!\");\n    var data = data.slice();\n    data.sort(function(a, b){return a - b});\n    var mid = Math.floor(data.length / 2);\n    if (data.length % 2 != 0) {\n        return data[mid];\n    } else {\n        var first = data[mid];\n        var second = data[mid - 1];\n        return (first + second) / 2;\n    }\n}\n\nconst VALID_MODES = [\"Attack\", \"Analyse\"];\n\nclass AttackForm extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmode: \"Attack\",\n\t\t\tattackingTroops: null,\n\t\t\tdefendingTroops: null\n\t\t};\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\t\tthis.handleClick();\n\t}\n\n\thandleClick() {\n\t\tconst mode = this.state.mode;\n\t\tconst attackingTroops = Number.parseInt(this.state.attackingTroops);\n\t\tconst defendingTroops = Number.parseInt(this.state.defendingTroops);\n\t\tif (!VALID_MODES.includes(mode)) {\n\t\t\talert(\"Invalid mode: \" + mode);\n\t\t\treturn;\n\t\t}\n\t\tif (!Number.isInteger(attackingTroops)) {\n\t\t\talert(\"Invalid attacking integer: \" + this.state.attackingTroops);\n\t\t\treturn;\n\t\t}\n\t\tif (!Number.isInteger(defendingTroops)) {\n\t\t\talert(\"Invalid defending troops: \" + this.state.defendingTroops);\n\t\t}\n\t\tthis.props.onSubmit({\n\t\t\tmode: mode, attackingTroops: attackingTroops,\n\t\t\tdefendingTroops: defendingTroops\n\t\t});\n\t}\n\n\tupdateMode(event) {\n\t\tconst mode = event.target.value;\n\t\tif (!VALID_MODES.includes(mode)) throw new Error(\"Invalid mode: \" + mode);\n\t\tthis.setState({mode: mode});\n\t}\n\tupdateAttackingTroops(event) {\n\t\tthis.setState({attackingTroops: event.target.value});\n\t}\n\tupdateDefendingTroops(event) {\n\t\tthis.setState({defendingTroops: event.target.value});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Form>\n\t\t\t\t<Form.Group>\n\t\t\t\t\t<Form.Control\n\t\t\t\t\t  value={this.state.mode}\n\t\t\t\t\t  as=\"select\"\n\t\t\t\t\t  onChange={(e) => this.updateMode(e)}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option>Attack</option>\n\t\t\t\t\t\t<option>Analyse</option>\n\t\t\t\t\t</Form.Control>\n\t\t\t\t\t<Form.Label>Attacking Troops</Form.Label>\n\t\t\t\t\t<Form.Control type=\"number\" min=\"2\" \n\t\t\t\t\t\tonChange={(e) => this.updateAttackingTroops(e)} />\n\t\t\t\t\t<Form.Label>Defending Troops</Form.Label>\n\t\t\t\t\t<Form.Control type=\"number\" min=\"1\"\n\t\t\t\t\t\tonChange={(e) => this.updateDefendingTroops(e)} />\t\t\n\t\t\t\t</Form.Group>\n\t\t\t\t<Button variant=\"primary\" onClick={(e) => this.handleClick(e)}>Run</Button>\n\t\t\t</Form>\n\t\t);\n\t}\n}\n\nfunction AttackOutcome(props) {\n\tif (props.attackSuccess) {\n\t\treturn <p>Attacker wins with ${props.attacker.troops} troops remaining</p>;\n\t} else {\n\t\treturn <p>Defender wins with ${props.defender.troops} troops remaining</p>;\n\t}\n}\n\nfunction AnalyseOutcome(props) {\n\tconst result = props.result;\n\tlet survivingAttackMsg;\n\tlet survivingDefenceMsg;\n\tif (result.survivingAttackTroops.length > 0) {\n\t\tsurvivingAttackMsg = <p>Median troops surviving a successful attack: {median(result.survivingAttackTroops)}</p>;\n\t} else {\n\t\tsurvivingAttackMsg = <p>Attacker never wins</p>;\n\t}\n\tif (result.survivingDefenceTroops.length > 0) {\n\t\tsurvivingDefenceMsg = <p>Median troops surviving a successful defence: {median(result.survivingDefenceTroops)}</p>;\n\t} else {\n\t\tsurvivingDefenceMsg = <p>Defender never wins</p>;\n\t}\n\tconst runs = result.survivingAttackTroops.length +\n\t\t\t\tresult.survivingDefenceTroops.length;\n\tconst percentage = (result.survivingAttackTroops.length / runs) * 100;\n\treturn (\n\t\t<div>\n\t\t\t<p>Attacker wins {percentage}% of the time</p>\n\t\t\t{survivingAttackMsg}\n\t\t\t{survivingDefenceMsg}\n\t\t</div>\n\t);\n}\n\nclass AttackSimulator extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmode: null,\n\t\t\tattack: null,\n\t\t\tanalyse: null,\n\t\t\tstatus: 0.0\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.worker = new Worker('simulate.js');\n\t\tthis.worker.onmessage = (e) => {\n\t\t\tif ('status' in e.data) {\n\t\t\t\t// This is just a status update\n\t\t\t\tthis.setState({status: e.data.status});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.log(`Recieved message ${Object.entries(e.data)}`)\n\t\t\tswitch (this.state.mode) {\n\t\t\t\tcase null:\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Attack\":\n\t\t\t\t\tconsole.log(`Updating attack state`);\n\t\t\t\t\tthis.setState({attack: e.data});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Analyse\":\n\t\t\t\t\tthis.setState({analyse: e.data});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid mode: ${this.state.mode}`);\n\t\t\t}\n\t\t};\n\t}\n\n\thandleFormResult(formResult) {\n\t\tif (formResult == null) return null;\n\t\tconst mode = formResult.mode;\n\t\tif (mode == null) return null;\n\t\t// Clear the old state, but update the mode\n\t\tthis.setState({\n\t\t\tmode: mode,\n\t\t\tattack: null,\n\t\t\tanalyse: null,\n\t\t\tstatus: 0.0\n\t\t});\n\t\tconst attackingTroops = formResult.attackingTroops;\n\t\tconst defendingTroops = formResult.defendingTroops;\n\t\tthis.worker.postMessage({\n\t\t\tmode: mode,\n\t\t\tattackingTroops: attackingTroops,\n\t\t\tdefendingTroops: defendingTroops\n\t\t});\n\t}\n\n\trenderOutcome() {\n\t\tif (this.state.mode == null) return null;\n\t\tswitch (this.state.mode) {\n\t\t\tcase \"Attack\":\n\t\t\t\tconst attack = this.state.attack;\n\t\t\t\tif (attack == null) {\n\t\t\t\t\treturn <p>Awaiting attack results....</p>;\n\t\t\t\t} else if (attack.win) {\n                \treturn <p>Attacker wins with {attack.attacker} troops remaining</p>;\n                } else {\n                \treturn <p>Defender wins with {attack.defender} troops remaining</p>;\n                }\n            case \"Analyse\":\n            \tconst analyse = this.state.analyse;\n            \tif (analyse == null) {\n            \t\treturn <p>Awaiting analysis results {this.state.status * 100}%....</p>;\n            \t} else {\n            \t\treturn <AnalyseOutcome result={analyse} />;\n            \t}\n            default:\n            \tthrow new Error(this.state.mode);\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<Container>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={true}>\n\t\t\t\t\t\t<AttackForm onSubmit={(formResult) => this.handleFormResult(formResult)} />\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={true}>\n\t\t\t\t\t\t<h4>Outcome</h4>\n\t\t\t\t\t\t{this.renderOutcome()}\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n\t\t);\n\t}\n}\n\nexport default AttackSimulator;","import React from 'react';\nimport GITHUB_CORNER_HTML from './github_corner.js'\n\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\n\nimport Container from 'react-bootstrap/Container';\n\nimport AttackSimulator from './Simulator.js';\n\nfunction RiskNavBar() {\n  return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"\">Risk Utilities</Navbar.Brand>\n      <Navbar.Collapse id=\"navbarSupportedContent\">\n        <Nav className=\"mr-auto\">\n          <Nav.Item>\n            <Nav.Link active={true}>Home</Nav.Link> \n          </Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n      {/* Our github logo */}\n      <div dangerouslySetInnerHTML={{__html: GITHUB_CORNER_HTML}} />\n    </Navbar>\n  );\n}\n\nfunction RiskHeader() {\n  return (\n    <Container>\n    <div>\n        <h1>Risk Utilities</h1>\n        <p class=\"lead\">Simulate attacks and analyse outputs</p>\n    </div>\n    </Container>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <RiskNavBar />\n\n      <RiskHeader />\n\n      <AttackSimulator />\n    </div>\n  );\n}\n\nexport default App;","const GITHUB_CORNER_WEBSITE = \"https://github.com/Techcable/risk-utils\";\n\nconst GITHUB_CORNER_HTML = '<a href=' + GITHUB_CORNER_WEBSITE + ' class=\"github-corner\" aria-label=\"View source on Github\"><svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#70B7FD; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"><path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path><path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>';\n\nexport default GITHUB_CORNER_HTML;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}